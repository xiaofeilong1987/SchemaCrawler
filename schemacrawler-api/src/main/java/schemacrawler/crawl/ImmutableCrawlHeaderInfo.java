/*
 *
 * SchemaCrawler
 * http://sourceforge.net/projects/schemacrawler
 * Copyright (c) 2000-2015, Sualeh Fatehi.
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 */

package schemacrawler.crawl;


import static java.util.Objects.requireNonNull;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import schemacrawler.schema.CrawlHeaderInfo;
import schemacrawler.schema.DatabaseInfo;
import schemacrawler.schema.JdbcDriverInfo;
import schemacrawler.schema.SchemaCrawlerInfo;

/**
 * SchemaCrawler information.
 *
 * @author Sualeh Fatehi sualeh@hotmail.com
 */
final class ImmutableCrawlHeaderInfo
  implements CrawlHeaderInfo
{

  private static final long serialVersionUID = 5982990326485881993L;

  private final String schemaCrawlerInfo;
  private final String jdbcDriverInfo;
  private final String databaseInfo;
  private final String title;
  private final LocalDateTime crawlTimestamp;

  ImmutableCrawlHeaderInfo(final SchemaCrawlerInfo schemaCrawlerInfo,
                           final JdbcDriverInfo jdbcDriverInfo,
                           final DatabaseInfo databaseInfo,
                           final String title)
  {
    requireNonNull(schemaCrawlerInfo);
    this.schemaCrawlerInfo = String.format("%s %s", schemaCrawlerInfo
      .getSchemaCrawlerProductName(), schemaCrawlerInfo
      .getSchemaCrawlerVersion());

    requireNonNull(jdbcDriverInfo);
    this.jdbcDriverInfo = String.format("%s %s",
                                        jdbcDriverInfo.getDriverName(),
                                        jdbcDriverInfo.getDriverVersion());

    requireNonNull(databaseInfo);
    this.databaseInfo = String.format("%s %s",
                                      databaseInfo.getProductName(),
                                      databaseInfo.getProductVersion());

    this.title = title;
    crawlTimestamp = LocalDateTime.now();
  }

  @Override
  public LocalDateTime getCrawlTimestamp()
  {
    return crawlTimestamp;
  }

  @Override
  public String getDatabaseInfo()
  {
    return databaseInfo;
  }

  @Override
  public String getJdbcDriverInfo()
  {
    return jdbcDriverInfo;
  }

  @Override
  public String getSchemaCrawlerInfo()
  {
    return schemaCrawlerInfo;
  }

  @Override
  public String getTitle()
  {
    return title;
  }

  /**
   * {@inheritDoc}
   *
   * @see Object#toString()
   */
  @Override
  public String toString()
  {
    final StringBuilder info = new StringBuilder();
    info.append("-- generated by: ").append(schemaCrawlerInfo)
      .append(System.lineSeparator());
    info
      .append("-- generated on: ")
      .append(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
        .format(getCrawlTimestamp())).append(System.lineSeparator());
    info.append("-- database: ").append(databaseInfo)
      .append(System.lineSeparator());
    info.append("-- driver: ").append(jdbcDriverInfo)
      .append(System.lineSeparator());
    return info.toString();
  }

}
